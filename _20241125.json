{"index":"","data":[{"id":"39610581690355712","doc":{"id":"39610581690355712","created_at":"2024-11-23T15:18:18.6063085+08:00","updated_at":"2024-11-23T15:18:18.6063085+08:00","title":"RESTful API","abstract":"# RESTful API\n\n### 简介\n\nRESTful API（Representational State Transfer API）是一种设计和构建网络服务的架构风格，主要用于在客户端和服务","content":"# RESTful API\n\n### 简介\n\nRESTful API（Representational State Transfer API）是一种设计和构建网络服务的架构风格，主要用于在客户端和服务器之间传输数据。\n\n### URL设计\n\n#### 1.1 动词加宾语\n\nRESTful 的核心思想就是客户端发出的数据操作指令都是”动词 + 宾语”的结构。比如， `GET /articles` 这个命令， `GET` 是动词， `/articles` 是宾语。\n\n根据 HTTP 规范，动词一律大写。\n\n#### 1.2 宾语必须是名词\n\n宾语就是 API 的 URL，是 HTTP 动词作用的对象。它应该是名词，不能是动词。比如， `/articles` 这个 URL 就是正确的，而下面的 URL 不是名词，所以都是错误的。\n\n\u003e ```http\n\u003e /getAllCars\n\u003e /createNewCar\n\u003e /deleteAllRedCars\n\u003e\n\u003e ```\n\n#### 1.3 复数URL\n\n既然 URL 是名词，那么应该使用复数，还是单数？\n\n这没有统一的规定，但是常见的操作是读取一个集合，比如 `GET /articles`（读取所有文章），这里明显应该是复数。\n\n为了统一起见，建议都使用复数 URL，比如 `GET /articles/2` 要好于 `GET /article/2`。\n\n#### 1.4 避免多级URL\n\n常见的情况是，资源需要多级分类，因此很容易写出多级的 URL，比如获取某个作者的某一类文章。\n\n\u003e ```http\n\u003e GET /authors/12/categories/2\n\u003e\n\u003e ```\n\n这种 URL 不利于扩展，语义也不明确，往往要想一会，才能明白含义。\n\n更好的做法是，除了第一级，其他级别都用查询字符串表达。\n\n\u003e ```http\n\u003e GET /authors/12?categories=2\n\u003e\n\u003e ```\n\n下面是另一个例子，查询已发布的文章。你可能会设计成下面的 URL。\n\n\u003e ```http\n\u003e GET /articles/published\n\u003e\n\u003e ```\n\n查询字符串的写法明显更好。\n\n\u003e ```http\n\u003e GET /articles?published=true\n\u003e\n\u003e ```\n\n### 状态码\n\n#### 2.1状态码必须精确\n\n客户端的每一次请求，服务器都必须给出回应。回应包括 HTTP 状态码和数据两部分。\n\nHTTP 状态码就是一个三位数，分成五个类别。\n\n\u003e ```http\n\u003e 1xx：相关信息\n\u003e 2xx：操作成功\n\u003e 3xx：重定向\n\u003e 4xx：客户端错误\n\u003e 5xx：服务器错误\n\u003e\n\u003e ```\n\nAPI 不需要 `1xx` 状态码，下面介绍其他四类状态码的精确含义。\n\n#### 2.2 2XX状态码\n\n\u003e `200` 状态码表示操作成功，但是不同的方法可以返回更精确的状态码。\n\u003e\n\u003e ```http\n\u003e GET: 200 OK\n\u003e POST: 201 Created\n\u003e PUT: 200 OK\n\u003e DELETE: 204 No Content\n\u003e\n\u003e ```\n\n上面代码中， `POST` 返回 `201` 状态码，表示生成了新的资源； `DELETE` 返回 `204` 状态码，表示资源已经不存在。\n\n此外， `202 Accepted` 状态码表示服务器已经收到请求，但还未进行处理，会在未来再处理，通常用于异步操作。下面是一个例子。\n\n\u003e ```http\n\u003e HTTP/1.1 202 Accepted\n\u003e \u003e\n\u003e {\n\u003e   \"task\": {\n\u003e     \"href\": \"/api/company/job-management/jobs/2130040\",\n\u003e     \"id\": \"2130040\"\n\u003e   }\n\u003e }\n\u003e\n\u003e ```\n\n#### 2.3 3XX状态码\u003e\n\nAPI 用不到 `301` 状态码（永久重定向）和 `302` 状态码（暂时重定向， `307` 也是这个含义），因为它们可以由应用级别返回，浏览器会直接跳转，API 级别可以不考虑这两种情况。\n\nAPI 用到的 `3xx` 状态码，主要是 `303 See Other`，表示参考另一个 URL。它与 `302` 和 `307` 的含义一样，也是”暂时重定向”，区别在于 `302` 和 `307` 用于 `GET` 请求，而 `303` 用于 `POST`、 `PUT` 和 `DELETE` 请求。收到 `303` 以后，浏览器不会自动跳转，而会让用户自己决定下一步怎么办。下面是一个例子。\n\n\u003e ```http\n\u003e HTTP/1.1 303 See Other\n\u003e Location: /api/orders/12345\n\u003e\n\u003e ```\n\n#### 2.4 4XX状态码\n\n`4xx` 状态码表示客户端错误，主要有下面几种。\n\n`400 Bad Request`：服务器不理解客户端的请求，未做任何处理。\n\n`401 Unauthorized`：用户未提供身份验证凭据，或者没有通过身份验证。\n\n`403 Forbidden`：用户通过了身份验证，但是不具有访问资源所需的权限。\n\n`404 Not Found`：所请求的资源不存在，或不可用。\n\n`405 Method Not Allowed`：用户已经通过身份验证，但是所用的 HTTP 方法不在他的权限之内。\n\n`410 Gone`：所请求的资源已从这个地址转移，不再可用。\n\n`415 Unsupported Media Type`：客户端要求的返回格式不支持。比如，API 只能返回 JSO\u003eN 格式，但是客户端要求返回 XML 格式。\n\n`422 Unprocessable Entity` ：客户端上传的附件无法处理，导致请求失败。\n\n`429 Too Many Requests`：客户端的请求次数超过限额。\n\n#### 2.5 5XX状态码\n\n`5xx` 状态码表示服务端错误。一般来说，API 不会向用户透露服务器的详细信息，所以只要两个状态码就够了。\n\n`500 Internal Server Error`：客户端请求有效，服务器处理时发生了意外。\n\n`503 Service Unavailable`：服务器无法处理请求，一般用于网站维护状态。\n\n### 服务器回应\n\n#### 3.1 不要返回纯文本\n\nAPI 返回的数据格式，不应该是纯文本，而应该是一个 JSON 对象，因为这样才能返回标准的结构化数据。所以，服务器回应的 HTTP 头的 `Content-Type` 属性要设为 `application/json`。\n\n客户端请求时，也要明确告诉服务器，可以接受 JSON 格式，即请求的 HTTP 头的 `ACCEPT` 属性也要设成 `application/json`。下面是一个例子。\n\n\u003e ```http\n\u003e GET /orders/2 HTTP/1.1\n\u003e Accept: application/json\n\u003e\n\u003e ```\n\n#### 3.2 发生错误时，不要返回 200 状态码\n\n有一种不恰当的做法是，即使发生错误，也返回 `200` 状态码，把错误信息放在数据体里面，就像下面这样。\n\n\u003e ```http\n\u003e HTTP/1.1 200 OK\n\u003e Content-Type: application/json\n\u003e\n\u003e {\n\u003e   \"status\": \"failure\",\n\u003e   \"data\": {\n\u003e     \"error\": \"Expected at least two items in list.\"\n\u003e   }\n\u003e }\n\u003e\n\u003e ```\n\n上面代码中，解析数据体以后，才能得知操作失败。\n\n这张做法实际上取消了状态码，这是完全不可取的。正确的做法是，状态码反映发生的错误，具体的错误信息放在数据体里面返回。下面是一个例子。\n\n\u003e ```http\n\u003e HTTP/1.1 400 Bad Request\n\u003e Content-Type: application/json\n\u003e\n\u003e {\n\u003e   \"error\": \"Invalid payoad.\",\n\u003e   \"detail\": {\n\u003e      \"surname\": \"This field is required.\"\n\u003e   }\n\u003e }\n\u003e\n\u003e ```\n\n#### 3.3 提供链接\n\nAPI 的使用者未必知道，URL 是怎么设计的。一个解决方法就是，在回应中，给出相关链接，便于下一步操作。这样的话，用户只要记住一个 URL，就可以发现其他的 URL。这种方法叫做 HATEOAS。\n\n举例来说，GitHub 的 API 都在 [api.github.com](https://api.github.com/) 这个域名。访问它，就可以得到其他 URL。\n\n\u003e ```http\n\u003e {\n\u003e   ...\n\u003e   \"feeds_url\": \"https://api.github.com/feeds\",\n\u003e   \"followers_url\": \"https://api.github.com/user/followers\",\n\u003e   \"following_url\": \"https://api.github.com/user/following{/target}\",\n\u003e   \"gists_url\": \"https://api.github.com/gists{/gist_id}\",\n\u003e   \"hub_url\": \"https://api.github.com/hub\",\n\u003e   ...\n\u003e }\n\u003e\n\u003e ```\n\n上面的回应中，挑一个 URL 访问，又可以得到别的 URL。对于用户来说，不需要记住 URL 设计，只要从 api.github.com 一步步查找就可以了。\n\nHATEOAS 的格式没有统一规定，上面例子中，GitHub 将它们与其他属性放在一起。更好的做法应该是，将相关链接与其他属性分开。\n\n\u003e ```http\n\u003e HTTP/1.1 200 OK\n\u003e Content-Type: application/json\n\u003e\n\u003e {\n\u003e   \"status\": \"In progress\",\n\u003e    \"links\": {[\n\u003e     { \"rel\":\"cancel\", \"method\": \"delete\", \"href\":\"/api/status/12345\" } ,\n\u003e     { \"rel\":\"edit\", \"method\": \"put\", \"href\":\"/api/status/12345\" }\n\u003e   ]}\n\u003e }\n\u003e\n\u003e ```","look_count":0,"comment_count":0,"digg_count":0,"collects_count":0,"user_id":2,"user_name":"admin","category":"测试","cover_id":17,"cover_url":"/uploads/images/sky-24-11-7-3.jpg","version":1}},{"id":"40030316122869760","doc":{"id":"40030316122869760","created_at":"2024-11-24T19:06:09.8325849+08:00","updated_at":"2024-11-24T19:06:09.8325849+08:00","title":" Go的函数选项模式","abstract":"# Go的函数选项模式\n\n### 问题提出\n\n在Golang开发中我们可能会遇到这样一个问题，当我们为一个结构体编写构造函数时发现这个结构体有很多字段，这使得我们的构造函数参数变得冗长，难以理解，而且","content":"# Go的函数选项模式\n\n### 问题提出\n\n在Golang开发中我们可能会遇到这样一个问题，当我们为一个结构体编写构造函数时发现这个结构体有很多字段，这使得我们的构造函数参数变得冗长，难以理解，而且会造成默认值问题。\n\n这个时候我们就可以使用Go 语言中的 **函数选项模式**，Go 语言中的 **函数选项模式**（Functional Options Pattern）是一种常用的设计模式，尤其适用于需要构建灵活、可配置对象的场景。通过这个模式，我们可以避免构造函数传入过多的参数，特别是当参数数量较多或者参数类型相同，容易引发混淆和出错时，函数选项模式提供了更简洁和可读性更高的解决方案。\n\n### 基本思想\n\n函数选项模式的核心思想是：\n\n- 使用一系列可选的 **配置函数** 来逐步设置结构体的字段，而不是通过构造函数直接传递所有参数。\n- 构造函数只接受一个或多个配置函数，并在内部调用这些函数来完成对象的初始化。\n\n### 示例\n\n##### 初级\n\n1. 定义结构体\n\n\n   ```go\n   package main\n\n   import (\n   \t\"fmt\"\n   \t\"time\"\n   )\n\n   // Server 表示需要配置的对象\n   type Server struct {\n   \thost    string\n   \tport    int\n   \ttimeout time.Duration\n   }\n\n   ```\n\n2. 定义配置函数类型\n\n\n接下来定义一个函数类型 `Option`，它接收指向 `Server` 的指针作为参数，并修改它的字段。\n\n```go\n// Option 定义一个函数类型，用于修改 Server 配置\ntype Option func(*Server)\n\n```\n\n1. 定义配置函数\n\n针对 `Server` 的不同字段，我们分别定义配置函数：\n\n```go\n// 设置 host\nfunc WithHost(host string) Option {\n\treturn func(s *Server) {\n\t\ts.host = host\n\t}\n}\n\n// 设置 port\nfunc WithPort(port int) Option {\n\treturn func(s *Server) {\n\t\ts.port = port\n\t}\n}\n\n// 设置 timeout\nfunc WithTimeout(timeout time.Duration) Option {\n\treturn func(s *Server) {\n\t\ts.timeout = timeout\n\t}\n}\n\n```\n\n1. 定义构造函数\n\n构造函数接受可变参数 `Option`，这些参数会依次作用于 `Server` 对象，配置它的各个字段。默认情况下，我们可以先初始化 `Server`，然后应用每个 `Option`。\n\n```go\n// NewServer 创建一个 Server，并应用所有的配置函数\nfunc NewServer(opts ...Option) *Server {\n\t// 设置默认值\n\ts := \u0026Server{\n\t\thost:    \"localhost\",\n\t\tport:    8080,\n\t\ttimeout: 30 * time.Second,\n\t}\n\n\t// 应用每一个配置函数\n\tfor _, opt := range opts {\n\t\topt(s)\n\t}\n\n\treturn s\n}\n\n```\n\n1. 使用函数选项模式\n\n通过这种模式，我们可以灵活地选择设置哪些参数，也可以不设置，保留默认值。\n\n```go\nfunc main() {\n\t// 使用默认值创建 Server\n\tserver1 := NewServer()\n\tfmt.Printf(\"Server1: host=%s, port=%d, timeout=%s\\n\", server1.host, server1.port, server1.timeout)\n\n\t// 设置 host 和 port，使用默认的 timeout\n\tserver2 := NewServer(WithHost(\"192.168.1.1\"), WithPort(9090))\n\tfmt.Printf(\"Server2: host=%s, port=%d, timeout=%s\\n\", server2.host, server2.port, server2.timeout)\n\n\t// 设置 host、port 和 timeout\n\tserver3 := NewServer(WithHost(\"10.0.0.1\"), WithPort(8081), WithTimeout(60*time.Second))\n\tfmt.Printf(\"Server3: host=%s, port=%d, timeout=%s\\n\", server3.host, server3.port, server3.timeout)\n}\n\n```\n\n1. 输出：\n\n\n   ```go\n   bash复制代码Server1: host=localhost, port=8080, timeout=30s\n   Server2: host=192.168.1.1, port=9090, timeout=30s\n   Server3: host=10.0.0.1, port=8081, timeout=1m0s\n\n   ```\n\n\n##### 高级\n\n1. 定义 `HttpClient` 和选项接口\n\n\n   ```go\n   package main\n\n   import (\n   \t\"fmt\"\n   \t\"net/http\"\n   \t\"time\"\n   )\n\n   // 定义 HttpClient 结构体\n   type HttpClient struct {\n   \ttimeout time.Duration\n   \theaders map[string]string\n   }\n\n   // 定义 ConfigOption 接口\n   type ConfigOption interface {\n   \tapply(*HttpClient)\n   }\n\n   // FuncOption 用于实现 ConfigOption 接口\n   type FuncOption struct {\n   \tf func(*HttpClient)\n   }\n\n   // 实现 apply 方法\n   func (f FuncOption) apply(client *HttpClient) {\n   \tf.f(client)\n   }\n\n   // 创建新的 FuncOption\n   func NewFuncOption(f func(*HttpClient)) FuncOption {\n   \treturn FuncOption{f: f}\n   }\n\n   ```\n\n\n**灵活的选项实现：** 通过实现不同的 `ConfigOption` 接口，为同一个配置添加多种不同的选项行为。例如，除了函数选项外，你还可以通过继承 `ConfigOption` 来添加基于其他逻辑的配置选项。\n\n**开放封闭原则（OCP）：** 使用 `ConfigOption` 接口遵循了 **开放封闭原则**（Open-Closed Principle），即对扩展开放，对修改封闭。任何新的配置选项都可以通过实现 `ConfigOption` 接口来完成，而不需要修改原有的 `NewConfig` 逻辑。\n\n**功能封装**：通过 `FuncOption` 封装了可选参数的行为，确保了所有的配置行为都集中在 `apply` 方法内进行。这种封装不仅提高了代码的可读性，还使得配置逻辑更加统一。\n\n**行为控制**：使用 `apply` 方法来统一处理配置项，可以控制每个配置行为的执行顺序、条件等。例如，可以在调用 `apply` 时添加一些预处理逻辑，或根据不同的条件跳过某些选项的应用。\n\n1. 实现可选配置项daw\n\n将实现两个可选配置项：\n\n- `WithTimeout`：允许用户设置 HTTP 客户端的超时。\n- `WithHeader`：允许用户添加自定义的 HTTP 请求头。\n\n\n  ```go\n  // 配置项：设置超时\n  func WithTimeout(timeout time.Duration) ConfigOption {\n  \treturn NewFuncOption(func(client *HttpClient) {\n  \t\tclient.timeout = timeout\n  \t})\n  }\n\n  // 配置项：添加请求头\n  func WithHeader(key, value string) ConfigOption {\n  \treturn NewFuncOption(func(client *HttpClient) {\n  \t\tif client.headers == nil {\n  \t\t\tclient.headers = make(map[string]string)\n  \t\t}\n  \t\tclient.headers[key] = value\n  \t})\n  }\n\n  ```\n\n\n  1. 创建 `HttpClient` 实例\n\n`NewHttpClient` 函数用于创建 `HttpClient` 实例，允许用户传入可选的配置项。\n\n```go\n// 创建新的 HttpClient\nfunc NewHttpClient(opts ...ConfigOption) *HttpClient {\n\tclient := \u0026HttpClient{\n\t\ttimeout: 30 * time.Second,  // 设置默认超时\n\t\theaders: make(map[string]string),\n\t}\n\n\t// 应用所有传入的配置项\n\tfor _, opt := range opts {\n\t\topt.apply(client)\n\t}\n\n\treturn client\n}\n\n```\n\n1. 使用示例\n\n展示如何使用不同的选项来创建 `HttpClient` 实例。\n\n```go\nfunc main() {\n\t// 创建一个没有任何可选配置的 HttpClient\n\tdefaultClient := NewHttpClient()\n\tfmt.Printf(\"Default Client: Timeout=%v, Headers=%v\\n\", defaultClient.timeout, defaultClient.headers)\n\n\t// 创建一个设置了超时和自定义请求头的 HttpClient\n\tcustomClient := NewHttpClient(\n\t\tWithTimeout(10*time.Second),\n\t\tWithHeader(\"Authorization\", \"Bearer token123\"),\n\t\tWithHeader(\"User-Agent\", \"MyApp\"),\n\t)\n\tfmt.Printf(\"Custom Client: Timeout=%v, Headers=%v\\n\", customClient.timeout, customClient.headers)\n}\n\n```\n\n1. 输出\n\n\n   ```go\n   Default Client: Timeout=30s, Headers=map[]\n   Custom Client: Timeout=10s, Headers=map[Authorization:Bearer token123 User-Agent:MyApp]\n\n   ```\n\n\n详细解释\n\n- **`ConfigOption` 接口**：定义了 `apply(*HttpClient)` 方法，用于将配置应用到 `HttpClient` 实例。\n- **`FuncOption` 结构体**：是 `ConfigOption` 接口的具体实现，封装了一个函数 `f func(*HttpClient)`，在 `apply` 中执行这个函数。\n- **`WithTimeout` 和 `WithHeader`**：这两个函数创建了 `FuncOption`，用来设置 `HttpClient` 的超时和自定义请求头。\n\n1. 扩展性\n\n现在可以非常容易地添加更多的配置选项，而不需要修改现有的 `NewHttpClient` 代码。例如，如果想添加一个配置项来设置重试次数，只需要添加一个新的 `WithRetries` 函数：\n\n```go\n// 配置项：设置重试次数\nfunc WithRetries(retries int) ConfigOption {\n\treturn NewFuncOption(func(client *HttpClient) {\n\t\t// 在这里设置重试逻辑\n\t\tfmt.Printf(\"Setting retries to %d\\n\", retries)\n\t})\n}\n\n```\n\n然后可以像这样使用它：\n\n```go\nclient := NewHttpClient(WithTimeout(5*time.Second), WithRetries(3))\n\n```","look_count":1,"comment_count":0,"digg_count":0,"collects_count":0,"user_id":2,"user_name":"admin","category":"测试","cover_id":19,"cover_url":"/uploads/images/sky-24-11-7-4.png","version":1}},{"id":"40300390318608384","doc":{"id":"40300390318608384","created_at":"2024-11-25T12:59:21.8004746+08:00","updated_at":"2024-11-25T12:59:21.8004746+08:00","title":"grpc中的名称解析","abstract":"# grpc中的名称解析\n\n名称解析器（name resolver）可以看作是一个 `map[service-name][]backend-ip`。它接收一个服务名称，并返回后端的 IP 列表。gRP","content":"# grpc中的名称解析\n\n名称解析器（name resolver）可以看作是一个 `map[service-name][]backend-ip`。它接收一个服务名称，并返回后端的 IP 列表。gRPC中根据目标字符串中的 `scheme` 选择名称解析器。\n\n### DNS解析器\n\ngRPC中默认使用的名称解析器是 DNS，即在gRPC客户端执行 `grpc.Dial` 时提供域名，默认会将DNS解析出对应的IP列表返回。\n\n使用默认DNS解析器的名称语法为： `dns:[//authority/]host[:port]`\n\n```go\nconn, err := grpc.Dial(\"dns:///localhost:8972\",\n\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n)\n\n```\n\n### consul resolver\n\n社区里有对应不同注册中心的resolver，例如下面是使用 consul 作为注册中心的示例。其中使用了第三方的 [grpc-consul-resolver](https://github.com/mbobakov/grpc-consul-resolver) 库作为consul resolver。\n\n```go\npackage main\n\nimport _ \"github.com/mbobakov/grpc-consul-resolver\"\n\n// ...\n\nconn, err := grpc.Dial(\n\t\t// consul服务\n\t\t\"consul://192.168.1.11:8500/hello?wait=14s\",\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\n```\n\n### 自定义解析器AsAs\n\n除了使用内置和社区提供的名称解析器，我们还可以自定义一套自己的名称解析器。接下来我们就定义一个 `AsResolver`。\n\n```go\nconst (\n\tmyScheme   = \"As\"\n\tmyEndpoint = \"resolver.As.com\"\n)\n\n// 地址存储\nvar addrs = []string{\"127.0.0.1:8972\", \"127.0.0.1:8973\"}\n\n// 自定义解析器\ntype AsResolver struct {\n\ttarget     resolver.Target\n\tcc         resolver.ClientConn\n\taddrsStore map[string][]string\n\tmu         sync.RWMutex\n}\n\n// 解析地址\nfunc (r *AsResolver) ResolveNow(o resolver.ResolveNowOptions) {\n\tr.mu.RLock()\n\tdefer r.mu.RUnlock()\n\n\taddrStrs, exists := r.addrsStore[r.target.Endpoint]\n\tif !exists {\n\t\taddrStrs = []string{}\n\t}\n\taddrList := make([]resolver.Address, len(addrStrs))\n\tfor i, s := range addrStrs {\n\t\taddrList[i] = resolver.Address{Addr: s}\n\t}\n\tr.cc.UpdateState(resolver.State{Addresses: addrList})\n}\n\n// 关闭解析器\nfunc (*AsResolver) Close() {}\n\n// 构建解析器\ntype AsResolverBuilder struct{}\n\nfunc (*AsResolverBuilder) Build(target resolver.Target, cc resolver.ClientConn, opts resolver.BuildOptions) (resolver.Resolver, error) {\n\tr := \u0026AsResolver{\n\t\ttarget: target,\n\t\tcc:     cc,\n\t\taddrsStore: map[string][]string{\n\t\t\tmyEndpoint: addrs,\n\t\t},\n\t}\n\tr.ResolveNow(resolver.ResolveNowOptions{})\n\treturn r, nil\n}\n\nfunc (*AsResolverBuilder) Scheme() string { return myScheme }\n\n// 注册解析器\nfunc init() {\n\tresolver.Register(\u0026AsResolverBuilder{})\n}\n\n```\n\n在gRPC客户端按如下方式发起连接。\n\n```go\nconn, err := grpc.Dial(\n\t\"As:///resolver.As.com\",\n\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n)\n\n```\n\n`grpc.Dial` 函数中会先根据 `As` 这个 `scheme` 找到我们通过 `init` 函数注册的 `AsResolverBuilder`，然后调用它的 `Build()` 方法构建我们自定义的 `AsResolver`，并调用 `ResolveNow()` 方法获取到服务端地址。\n\n也可以在客户端建立连接时通过 `grpc.WithResolvers` 指定使用的名称解析器，使用这种方法就不需要事先注册名称解析器了。\n\n```go\nconn, err := grpc.Dial(\n\t\"As:///resolver.liwenzhou.com\",\n\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\tgrpc.WithResolvers(\u0026AsResolverBuilder{}), // 指定使用AsResolverBuilder\n)\n\n```","look_count":0,"comment_count":0,"digg_count":0,"collects_count":0,"user_id":2,"user_name":"admin","category":"测试","cover_id":16,"cover_url":"/uploads/images/city-24-3-28.jpg","version":1}},{"id":"40300520019070976","doc":{"id":"40300520019070976","created_at":"2024-11-25T12:59:52.7241028+08:00","updated_at":"2024-11-25T12:59:52.7241028+08:00","title":"Go-kit","abstract":"# Go-kit\n\n### 介绍\n\nGo kit 是一个用于构建微服务的工具包，旨在帮助开发者创建可维护、可扩展且具有高可用性的服务\n\n##### 特点\n\n- **服务发现**：支持多种服务发现机制，","content":"# Go-kit\n\n### 介绍\n\nGo kit 是一个用于构建微服务的工具包，旨在帮助开发者创建可维护、可扩展且具有高可用性的服务\n\n##### 特点\n\n- **服务发现**：支持多种服务发现机制，方便服务之间的调用。\n- **负载均衡**：内置负载均衡器，提升系统的稳定性和性能。\n- **传输层**：支持 gRPC、HTTP 等多种通信协议。\n- **监控和指标**：集成监控工具，帮助开发者跟踪服务性能。\n- **日志记录**：提供灵活的日志记录功能，便于排查问题。\n- **中间件支持**：支持多种中间件，如认证、限流等，增强服务的安全性和可靠性。\n\n### 架构与设计\n\n使用 Go kit 构建的服务分为三层：\n\n1. 传输层（Transport layer）\n\n   最外层的 **传输（transport）** 层是端点绑定到 HTTP 或 gRPC 等具体传输的地方。\n\n2. 端点层（Endpoint layer）\n\n   中间 **端点（endpoint）** 层是将服务的每个方法抽象为通用 [endpoint.Endpoint](https://godoc.org/github.com/go-kit/kit/endpoint#Endpoint) 以及实现安全性和抗脆弱性逻辑的位置。\n\n3. 服务层（Service layer）\n\n   最内层的 **服务（service）** 层是所有内容都基于特定服务定义的地方，也是实现所有业务逻辑的地方。\n\n\n在编写代码时，先服务层，再端点层，最后传输层，下面给出代码示例：\n\n##### 服务层\n\n```go\n// service层\n// 所有跟业务逻辑相关的我们都应该放在这一层。\n\n// 1.1 业务逻辑抽象为接口\n\ntype AddService interface {\n\tSum(ctx context.Context, a, b int) (int, error)\n\tConcat(ctx context.Context, a, b string) (string, error)\n}\n\n// 1.2 实现接口\n\n// addService 一个AddService接口的具体实现\n// 它的内部可以按需添加各种字段\ntype addService struct {\n\t// db db.Conn\n}\n\nvar (\n\t// ErrEmptyString 两个参数都是空字符串\n\tErrEmptyString = errors.New(\"两个参数都是空字符串\")\n)\n\n// Sum 返回两个数的和\nfunc (s addService) Sum(_ context.Context, a, b int) (int, error) {\n\t// 业务逻辑\n\t// 1.查询数据\n\t// s.db.Query()\n\t// 2.处理数据\n\treturn a + b, nil\n}\n\n// Concat 拼接两个字符串\nfunc (addService) Concat(_ context.Context, a, b string) (string, error) {\n\tif a == \"\" \u0026\u0026 b == \"\" {\n\t\treturn \"\", ErrEmptyString\n\t}\n\treturn a + b, nil\n}\n\n// NewService addService的构造函数\nfunc NewService() AddService {\n\treturn \u0026addService\n\t\t// db:db\n\t}\n}\n\n```\n\n##### 端点层\n\n```go\n// endpoint\n\n// 一个 endpoint 表示对外提供的一个方法\n\n// 1.3 请求和响应\ntype SumRequest struct {\n\tA int `json:\"a\"`\n\tB int `json:\"b\"`\n}\n\ntype SumResponse struct {\n\tV   int    `json:\"v\"`\n\tErr string `json:\"err,omitempty\"`\n}\n\ntype ConcatRequest struct {\n\tA string `json:\"a\"`\n\tB string `json:\"b\"`\n}\n\ntype ConcatResponse struct {\n\tV   string `json:\"v\"`\n\tErr string `json:\"err,omitempty\"`\n}\n\n// 2. endpoint\n// 借助 适配器 将 方法 -\u003e endpoint\n\nfunc makeSumEndpoint(srv AddService) endpoint.Endpoint {\n\treturn func(ctx context.Context, request interface{}) (interface{}, error) {\n\t\treq := request.(SumRequest)\n\t\tv, err := srv.Sum(ctx, req.A, req.B) // 方法调用\n\t\tif err != nil {\n\t\t\treturn SumResponse{V: v, Err: err.Error()}, nil\n\t\t}\n\t\treturn SumResponse{V: v}, nil\n\t}\n}\n\nfunc makeConcatEndpoint(srv AddService) endpoint.Endpoint {\n\treturn func(ctx context.Context, request interface{}) (interface{}, error) {\n\t\treq := request.(ConcatRequest)\n\t\tv, err := srv.Concat(ctx, req.A, req.B) // 方法调用\n\t\tif err != nil {\n\t\t\treturn ConcatResponse{V: v, Err: err.Error()}, nil\n\t\t}\n\t\treturn ConcatResponse{V: v}, nil\n\t}\n}\n\n```\n\n##### 传输层\n\n```go\n// transport\n\n// 网络传输相关的，包括协议（HTTP、gRPC、thrift...）等\n\n// HTTP JSON\n// decode\n// 请求来了之后根据 协议(HTTP、HTTP2)和编码(JSON、pb、thrift) 去解析数据\n\nfunc decodeSumRequest(ctx context.Context, r *http.Request) (interface{}, error) {\n\tvar request SumRequest\n\tif err := json.NewDecoder(r.Body).Decode(\u0026request); err != nil {\n\t\treturn nil, err\n\t}\n\treturn request, nil\n}\n\nfunc decodeConcatRequest(ctx context.Context, r *http.Request) (interface{}, error) {\n\tvar request ConcatRequest\n\tif err := json.NewDecoder(r.Body).Decode(\u0026request); err != nil {\n\t\treturn nil, err\n\t}\n\treturn request, nil\n}\n\n// 编码\n// 把响应数据 按协议和编码 返回\n// w: 代表响应的网络句柄\n// response: 业务层返回的响应数据\nfunc encodeResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {\n\treturn json.NewEncoder(w).Encode(response)\n}\n\nfunc NewHTTPServer(svc AddService) http.Handler {\n\t// HTTP JSON服务\n\tsumHandler := httptransport.NewServer(\n\t\tmakeSumEndpoint(svc),\n\t\tdecodeSumRequest,\n\t\tencodeResponse,\n\t)\n\n\tconcatHandler := httptransport.NewServer(\n\t\tmakeConcatEndpoint(svc),\n\t\tdecodeConcatRequest,\n\t\tencodeResponse,\n\t)\n\n\t// github.com/gorilla/mux\n\t// r := mux.NewRouter()\n\n\t// r.Handle(\"/sum\", sumHandler).Methods(\"POST\")\n\t// r.Handle(\"/concat\", concatHandler).Methods(\"POST\")\n\n\t//  gin\n\tr := gin.Default()\n\tr.POST(\"/sum\", gin.WrapH(sumHandler))\n\tr.POST(\"/concat\", gin.WrapH(concatHandler))\n\n\treturn r\n}\n\n// gRPC\n\ntype grpcServer struct {\n\tpb.UnimplementedAddServer\n\n\tsum    grpctransport.Handler\n\tconcat grpctransport.Handler\n}\n\n// NewGRPCServer 构造函数\nfunc NewGRPCServer(svc AddService) pb.AddServer {\n\treturn \u0026grpcServer{\n\t\tsum: grpctransport.NewServer(\n\t\t\tmakeSumEndpoint(svc), // endpoint\n\t\t\tdecodeGRPCSumRequest,\n\t\t\tencodeGRPCSumResponse,\n\t\t),\n\t\tconcat: grpctransport.NewServer(\n\t\t\tmakeConcatEndpoint(svc),\n\t\t\tdecodeGRPCConcatRequest,\n\t\t\tencodeGRPCConcatResponse,\n\t\t),\n\t}\n}\n\nfunc (s grpcServer) Sum(ctx context.Context, req *pb.SumRequest) (*pb.SumResponse, error) {\n\t_, resp, err := s.sum.ServeGRPC(ctx, req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn resp.(*pb.SumResponse), nil\n}\n\nfunc (s grpcServer) Concat(ctx context.Context, req *pb.ConcatRequest) (*pb.ConcatResponse, error) {\n\t_, resp, err := s.concat.ServeGRPC(ctx, req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn resp.(*pb.ConcatResponse), nil\n}\n\n// gRPC的请求与响应\n// decodeGRPCSumRequest 将Sum方法的gRPC请求参数转为内部的SumRequest\nfunc decodeGRPCSumRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {\n\treq := grpcReq.(*pb.SumRequest)\n\treturn SumRequest{A: int(req.A), B: int(req.B)}, nil\n}\n\n// decodeGRPCConcatRequest 将Concat方法的gRPC请求参数转为内部的ConcatRequest\nfunc decodeGRPCConcatRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {\n\treq := grpcReq.(*pb.ConcatRequest)\n\treturn ConcatRequest{A: req.A, B: req.B}, nil\n}\n\n// encodeGRPCSumResponse 封装Sum的gRPC响应\nfunc encodeGRPCSumResponse(_ context.Context, response interface{}) (interface{}, error) {\n\tresp := response.(SumResponse)\n\treturn \u0026pb.SumResponse{V: int64(resp.V), Err: resp.Err}, nil\n}\n\n// encodeGRPCConcatResponse 封装Concat的gRPC响应\nfunc encodeGRPCConcatResponse(_ context.Context, response interface{}) (interface{}, error) {\n\tresp := response.(ConcatResponse)\n\treturn \u0026pb.ConcatResponse{V: resp.V, Err: resp.Err}, nil\n}\n\n```\n\n##### 运行\n\nmain.go中代码如下，随后在命令行中编译运行即可\n\n```go\nvar (\n\thttpAddr = flag.Int(\"http-addr\", 8080, \"HTTP端口\")\n\tgRPCAddr = flag.Int(\"grpc-addr\", 8972, \"gRPC端口\")\n)\n\nfunc main() {\n\t// 前置资源初始化\n\n\tsrv := NewService()\n\n\tvar g errgroup.Group\n\n\t// HTTP\n\tg.Go(func() error {\n\t\thttpListener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *httpAddr))\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"net.Listen %d faield, err:%v\\n\", *httpAddr, err)\n\t\t\treturn err\n\t\t}\n\t\tdefer httpListener.Close()\n\t\thttpHandler := NewHTTPServer(srv)\n\n\t\treturn http.Serve(httpListener, httpHandler)\n\t})\n\t// gRPC\n\tg.Go(func() error {\n\t\tgrpcListener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *gRPCAddr))\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"net.Listen %d faield, err:%v\\n\", *gRPCAddr, err)\n\t\t\treturn err\n\t\t}\n\t\tdefer grpcListener.Close()\n\n\t\ts := grpc.NewServer() // gRPC Server\n\t\tpb.RegisterAddServer(s, NewGRPCServer(srv))\n\t\treturn s.Serve(grpcListener)\n\t})\n\n\t// wait\n\tif err := g.Wait(); err != nil {\n\t\tfmt.Printf(\"server exit with error:%v\\n\", err)\n\t}\n}\n\n```\n\n### 中间件\n\n### 调用其他服务\n\n### 服务发现与负载均衡","look_count":0,"comment_count":0,"digg_count":0,"collects_count":0,"user_id":2,"user_name":"admin","category":"测试","cover_id":16,"cover_url":"/uploads/images/city-24-3-28.jpg","version":1}}]}